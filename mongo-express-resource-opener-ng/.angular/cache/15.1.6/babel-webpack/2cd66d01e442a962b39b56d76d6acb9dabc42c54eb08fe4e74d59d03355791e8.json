{"ast":null,"code":"import * as i0 from \"@angular/core\";\n/**\n *  This implementation should run on localhost development session or in webpage mode\n*/\nexport class StoreServiceImplDev {\n  load(key) {\n    return new Promise((resolve, reject) => {\n      // timeout set to simulate ngModel problem and chrome storage synce delay\n      setTimeout(() => {\n        console.log(\"get data from browser local storage\");\n        console.log(localStorage.getItem(key));\n        resolve(JSON.parse(this.handleJsonNull(key)));\n      }, 1000);\n    });\n  }\n  save(key, content) {\n    return new Promise((resolve, reject) => {\n      // timeout set to simulate ngModel problem and chrome storage synce delay\n      localStorage.setItem(key, JSON.stringify(content));\n      resolve(\"dummy\");\n    });\n  }\n  handleJsonNull(key) {\n    let result = localStorage.getItem(key);\n    return result === null ? \"\" : result;\n  }\n}\nStoreServiceImplDev.ɵfac = function StoreServiceImplDev_Factory(t) {\n  return new (t || StoreServiceImplDev)();\n};\nStoreServiceImplDev.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: StoreServiceImplDev,\n  factory: StoreServiceImplDev.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAMA;;;AAOA,OAAM,MAAOA,mBAAmB;EAErBC,IAAI,CAACC,GAAY;IACpB,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAI;MACnC;MACAC,UAAU,CAAC,MAAK;QACZC,OAAO,CAACC,GAAG,CAAC,qCAAqC,CAAC;QAClDD,OAAO,CAACC,GAAG,CAACC,YAAY,CAACC,OAAO,CAACR,GAAG,CAAC,CAAC;QACtCE,OAAO,CAACO,IAAI,CAACC,KAAK,CAAC,IAAI,CAACC,cAAc,CAACX,GAAG,CAAC,CAAC,CAAC;MACjD,CAAC,EAAE,IAAI,CAAC;IACZ,CAAC,CAAC;EACN;EAEOY,IAAI,CAACZ,GAAW,EAAEa,OAAa;IAClC,OAAO,IAAIZ,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAI;MACnC;MACAI,YAAY,CAACO,OAAO,CAACd,GAAG,EAAES,IAAI,CAACM,SAAS,CAACF,OAAO,CAAC,CAAC;MAClDX,OAAO,CAAC,OAAO,CAAC;IACpB,CAAC,CAAC;EACN;EAEQS,cAAc,CAACX,GAAY;IAC/B,IAAIgB,MAAM,GAAmBT,YAAY,CAACC,OAAO,CAACR,GAAG,CAAC;IACtD,OAAOgB,MAAM,KAAK,IAAI,GAAG,EAAE,GAAGA,MAAM;EACxC;;AAxBSlB,mBAAmB;mBAAnBA,mBAAmB;AAAA;AAAnBA,mBAAmB;SAAnBA,mBAAmB;EAAAmB,SAAnBnB,mBAAmB;EAAAoB,YAFf;AAAM","names":["StoreServiceImplDev","load","key","Promise","resolve","reject","setTimeout","console","log","localStorage","getItem","JSON","parse","handleJsonNull","save","content","setItem","stringify","result","factory","providedIn"],"sourceRoot":"","sources":["/home/kovo/Documents/PROJEKTY GitHub/MongoExpressResourceOpenerNG/mongo-express-resource-opener-ng/src/app/_base/services/store.service.impl.dev.ts"],"sourcesContent":["// angular imports\nimport { Injectable } from \"@angular/core\";\n\n// my imports\nimport { StoreService } from \"./store.service\";\n\n/** \n *  This implementation should run on localhost development session or in webpage mode\n*/\n\n@Injectable({\n    providedIn : 'root'\n})\nexport class StoreServiceImplDev implements StoreService {\n\n    public load(key : string) : Promise<any> {\n        return new Promise((resolve, reject) => {\n            // timeout set to simulate ngModel problem and chrome storage synce delay\n            setTimeout(() => {\n                console.log(\"get data from browser local storage\"); \n                console.log(localStorage.getItem(key));\n                resolve(JSON.parse(this.handleJsonNull(key)));\n            }, 1000);\n        });\n    }\n\n    public save(key: string, content : any) : Promise<any> {\n        return new Promise((resolve, reject) => {\n            // timeout set to simulate ngModel problem and chrome storage synce delay\n            localStorage.setItem(key, JSON.stringify(content));\n            resolve(\"dummy\");\n        });\n    }\n\n    private handleJsonNull(key : string) : string {\n        let result : string | null = localStorage.getItem(key);\n        return result === null ? \"\" : result;\n    }\n\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}