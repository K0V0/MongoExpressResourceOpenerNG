{"ast":null,"code":"import { SettingsNames } from './../utils/enviroment.util';\nimport * as i0 from \"@angular/core\";\nexport class QueryServiceImpl {\n  constructor() {}\n  open(resourceId) {\n    var context = this;\n    return new Promise((resolve, reject) => {\n      if (resourceId === undefined || resourceId === null || resourceId.trim().length < 1) {\n        reject(false);\n      } else {\n        context.check(resourceId);\n      }\n    });\n  }\n  check(resourceId) {\n    var context = this;\n    // return new Promise((resolve, reject) => {\n    // });\n    return Promise.all([context.loadAllSettings()]).then(result => {});\n  }\n  loadAllSettings() {\n    return new Promise((resolve, reject) => {\n      let settingsPromises;\n      Object.values(SettingsNames).forEach(settingName => {});\n    });\n  }\n}\nQueryServiceImpl.ɵfac = function QueryServiceImpl_Factory(t) {\n  return new (t || QueryServiceImpl)();\n};\nQueryServiceImpl.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: QueryServiceImpl,\n  factory: QueryServiceImpl.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAASA,aAAa,QAAQ,4BAA4B;;AAO1D,OAAM,MAAOC,gBAAgB;EAIzBC,eAEA;EAEOC,IAAI,CAACC,UAA+B;IACvC,IAAIC,OAAO,GAAG,IAAI;IAClB,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAI;MACnC,IAAIJ,UAAU,KAAKK,SAAS,IAAIL,UAAU,KAAK,IAAI,IAAIA,UAAU,CAACM,IAAI,EAAE,CAACC,MAAM,GAAG,CAAC,EAAE;QACjFH,MAAM,CAAC,KAAK,CAAC;OAChB,MAAM;QACHH,OAAO,CAACO,KAAK,CAACR,UAAU,CAAC;;IAEjC,CAAC,CAAC;EACN;EAEQQ,KAAK,CAACR,UAAmB;IAC7B,IAAIC,OAAO,GAAG,IAAI;IAClB;IAEA;IACA,OAAOC,OAAO,CAACO,GAAG,CAAC,CACfR,OAAO,CAACS,eAAe,EAAE,CAC5B,CAAC,CACDC,IAAI,CAAEC,MAAY,IAAI,CAEvB,CAAC,CAAC;EACN;EAEQF,eAAe;IACnB,OAAO,IAAIR,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAI;MACnC,IAAIS,gBAAiC;MAErCC,MAAM,CAACC,MAAM,CAACnB,aAAa,CAAC,CAACoB,OAAO,CAAEC,WAAoB,IAAI,CAE9D,CAAC,CAAC;IACN,CAAC,CAAC;EACN;;AAxCSpB,gBAAgB;mBAAhBA,gBAAgB;AAAA;AAAhBA,gBAAgB;SAAhBA,gBAAgB;EAAAqB,SAAhBrB,gBAAgB;EAAAsB,YAFZ;AAAM","names":["SettingsNames","QueryServiceImpl","constructor","open","resourceId","context","Promise","resolve","reject","undefined","trim","length","check","all","loadAllSettings","then","result","settingsPromises","Object","values","forEach","settingName","factory","providedIn"],"sourceRoot":"","sources":["/home/kovo/Documents/PROJEKTY GitHub/MongoExpressResourceOpenerNG/mongo-express-resource-opener-ng/src/app/_base/services/query.service.impl.ts"],"sourcesContent":["import { StoreService } from './store.service';\nimport { SettingsNames } from './../utils/enviroment.util';\nimport { QueryService } from './query.service';\nimport { Injectable } from \"@angular/core\";\n\n@Injectable({\n    providedIn : 'root'\n})\nexport class QueryServiceImpl implements QueryService {\n\n    private storeService : StoreService;\n    \n    constructor() {\n        \n    }\n\n    public open(resourceId : string | undefined) : Promise<boolean> {\n        var context = this;\n        return new Promise((resolve, reject) => {\n            if (resourceId === undefined || resourceId === null || resourceId.trim().length < 1) {\n                reject(false);\n            } else {\n                context.check(resourceId)\n            }\n        });\n    }\n\n    private check(resourceId : string) : Promise<any> {\n        var context = this;\n        // return new Promise((resolve, reject) => {\n\n        // });\n        return Promise.all([\n            context.loadAllSettings()\n        ])\n        .then((result : any) => {\n\n        });\n    }\n\n    private loadAllSettings() : Promise<any> {\n        return new Promise((resolve, reject) => {\n            let settingsPromises : Promise<any>[];\n\n            Object.values(SettingsNames).forEach((settingName : string) => {\n\n            })\n        });\n    }\n\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}