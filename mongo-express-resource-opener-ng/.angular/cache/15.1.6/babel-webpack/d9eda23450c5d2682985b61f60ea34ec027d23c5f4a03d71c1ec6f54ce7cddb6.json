{"ast":null,"code":"import { EnviromentUtil, SettingsNames } from 'src/app/_base/utils/enviroment.util';\nimport { KeyValuePair, Settings } from './query.service';\nimport * as i0 from \"@angular/core\";\nexport class QueryServiceImpl {\n  constructor() {\n    //FIXME dependency injection on various enviroments\n    this.storeService = EnviromentUtil.getStoreService();\n  }\n  open(resourceId) {\n    var context = this;\n    return new Promise((resolve, reject) => {\n      if (resourceId === undefined || resourceId === null || resourceId.trim().length < 1) {\n        reject(false);\n      } else {\n        context.check(resourceId);\n      }\n    });\n  }\n  /** HELPING METHODS ------------------------------------------------------------------------------------------- */\n  check(resourceId) {\n    var context = this;\n    return Promise.all([context.loadAllSettings()]).then(settings => {\n      context.fireRequests(resourceId, settings);\n    });\n  }\n  fireRequests(resourceId, settings) {\n    var context = this;\n    return new Promise((resolve, reject) => {\n      let requestUrls = context.getDatasourcesUrls(settings, resourceId);\n    });\n  }\n  getDatasourcesUrls(settings, resourceId) {\n    let searchEverywhere = this.extractSetting(settings, SettingsNames.CHECK_ON_ALL_ENVIROMENTS);\n    let currentEnviroment = this.extractSetting(settings, SettingsNames.CURRENT_ENVIROMENT);\n    return this.extractSetting(settings, SettingsNames.ENVIROMENTS).filter(enviroment => searchEverywhere ? true : enviroment.id === currentEnviroment).flatMap(enviroment => enviroment.datasets).map(datasourceUrl => datasourceUrl.lastIndexOf(\"/\") === datasourceUrl.length ? datasourceUrl : datasourceUrl + \"/\").map(datasourceUrl => datasourceUrl + \"\\\"\" + resourceId + \"\\\"\");\n  }\n  loadAllSettings() {\n    return new Promise((resolve, reject) => {\n      let settingsPromises = [];\n      Object.values(SettingsNames).forEach(settingName => {\n        settingsPromises.push(this.storeService.loadWithKey(settingName));\n      });\n      Promise.allSettled(settingsPromises).then(results => {\n        let settings = [];\n        results.forEach(result => {\n          if (result.status === 'fulfilled') {\n            settings.push(result.value);\n          }\n        });\n        resolve(settings);\n      }).catch(() => {\n        reject('Error during loading settings from store - promises settling');\n      });\n    });\n  }\n  extractSetting(settings, settingType) {\n    return settings.flatMap(setting => setting).filter(setting => Object.keys(setting)[0] === settingType).find(x => x)[settingType];\n  }\n}\nQueryServiceImpl.ɵfac = function QueryServiceImpl_Factory(t) {\n  return new (t || QueryServiceImpl)();\n};\nQueryServiceImpl.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: QueryServiceImpl,\n  factory: QueryServiceImpl.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["EnviromentUtil","SettingsNames","KeyValuePair","Settings","QueryServiceImpl","constructor","storeService","getStoreService","open","resourceId","context","Promise","resolve","reject","undefined","trim","length","check","all","loadAllSettings","then","settings","fireRequests","requestUrls","getDatasourcesUrls","searchEverywhere","extractSetting","CHECK_ON_ALL_ENVIROMENTS","currentEnviroment","CURRENT_ENVIROMENT","ENVIROMENTS","filter","enviroment","id","flatMap","datasets","map","datasourceUrl","lastIndexOf","settingsPromises","Object","values","forEach","settingName","push","loadWithKey","allSettled","results","result","status","value","catch","settingType","setting","keys","find","x","factory","providedIn"],"sourceRoot":"","sources":["/home/kovo/Documents/PROJEKTY GitHub/MongoExpressResourceOpenerNG/mongo-express-resource-opener-ng/src/app/_base/services/query.service.impl.ts"],"sourcesContent":["import { Setting } from 'src/app/_base/decorators/setting/setting.decorator';\nimport { Injectable } from \"@angular/core\";\nimport { EnviromentUtil, SettingsNames } from 'src/app/_base/utils/enviroment.util';\nimport { DataSetsStoreRecordFormat } from './../components/_base/data-sets/data-sets.interfaces';\nimport { KeyValuePair, QueryService, Settings } from './query.service';\nimport { StoreService } from './store.service';\n\n@Injectable({\n    providedIn : 'root'\n})\nexport class QueryServiceImpl implements QueryService {\n\n    private storeService : StoreService;\n    \n    constructor() {\n        //FIXME dependency injection on various enviroments\n        this.storeService = EnviromentUtil.getStoreService();\n    }\n\n\n    public open(resourceId : string | undefined) : Promise<boolean> {\n        var context = this;\n        return new Promise((resolve, reject) => {\n            if (resourceId === undefined || resourceId === null || resourceId.trim().length < 1) {\n                reject(false);\n            } else {\n                context.check(resourceId)\n            }\n        });\n    }\n\n    /** HELPING METHODS ------------------------------------------------------------------------------------------- */\n\n    private check(resourceId : string) : Promise<any> {\n        var context = this;\n        return Promise.all([\n            context.loadAllSettings()\n        ])\n        .then((settings : Settings) => {\n            context.fireRequests(resourceId, settings)\n        });\n    }\n\n    private fireRequests(resourceId : string, settings : Settings) : Promise<any> {\n        var context = this;\n        return new Promise((resolve, reject) => { \n            let requestUrls : string[] =  context.getDatasourcesUrls(settings, resourceId);\n            \n        });\n    }\n\n\n\n    private getDatasourcesUrls(settings : Settings, resourceId : string) : string[] {\n\n        let searchEverywhere : boolean = this.extractSetting(settings, SettingsNames.CHECK_ON_ALL_ENVIROMENTS);\n        let currentEnviroment : number = this.extractSetting(settings, SettingsNames.CURRENT_ENVIROMENT);\n\n        return this.extractSetting(settings, SettingsNames.ENVIROMENTS)\n                .filter((enviroment : DataSetsStoreRecordFormat) => searchEverywhere ? true : enviroment.id === currentEnviroment)\n                .flatMap((enviroment : DataSetsStoreRecordFormat) => enviroment.datasets)\n                .map((datasourceUrl : string) => (datasourceUrl.lastIndexOf(\"/\") === datasourceUrl.length) ? datasourceUrl : datasourceUrl + \"/\")\n                .map((datasourceUrl :string) => datasourceUrl + \"\\\"\" + resourceId + \"\\\"\");\n    }\n\n    private loadAllSettings() : Promise<Settings> {\n        return new Promise((resolve, reject) => {\n\n            let settingsPromises : Promise<KeyValuePair>[] = [];\n            Object.values(SettingsNames).forEach((settingName : string) => {\n                settingsPromises.push(this.storeService.loadWithKey(settingName));\n            })\n\n            Promise.allSettled(settingsPromises)\n                .then((results) => {\n                    let settings : Settings = []; \n                    results.forEach((result) => {\n                        if (result.status === 'fulfilled') {\n                            settings.push(result.value);\n                        }\n                    });\n                    resolve(settings);\n                })\n                .catch(() => {\n                    reject('Error during loading settings from store - promises settling');\n                })\n        });\n    }\n\n    private extractSetting(settings : Settings, settingType : SettingsNames) : any {\n        return settings\n            .flatMap((setting) => setting)\n            .filter((setting : KeyValuePair) => Object.keys(setting)[0] === settingType)\n            .find((x) => x)[settingType]\n    }\n\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}