{"ast":null,"code":"import * as i0 from \"@angular/core\";\n/**\n *  This implementation should run on localhost development session or in webpage mode\n*/\nexport class StoreServiceImplDev {\n  constructor() {\n    this.SAVING_DELAY = 5000;\n    this.LOADING_DELAY = 1000;\n  }\n  load(key) {\n    return new Promise((resolve, reject) => {\n      if (key !== undefined && key !== null) {\n        this.loadingSimulation(String(key)).then(result => {\n          resolve(result);\n        }).catch(() => reject(\"No data found in localStorage\"));\n      } else {\n        reject(\"No key for data defined\");\n      }\n    });\n  }\n  save(key, content) {\n    return new Promise((resolve, reject) => {\n      if (content !== undefined) {\n        this.saveingSimulation(String(key), content).then(result => {\n          resolve(result);\n        });\n      } else {\n        reject(\"No data passed into local storage\");\n      }\n    });\n  }\n  handleJsonNull(key) {\n    let result = localStorage.getItem(key);\n    return result === null ? \"{}\" : result;\n  }\n  loadingSimulation(key) {\n    var context = this;\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        let resultString = context.handleJsonNull(key);\n        resultString !== \"{}\" ? resolve(JSON.parse(resultString)) : reject(\"No data in localStorage\");\n      }, this.LOADING_DELAY);\n    });\n  }\n  saveingSimulation(key, value) {\n    var context = this;\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        localStorage.setItem(key, JSON.stringify(value));\n        resolve(\"dummy\");\n      }, this.SAVING_DELAY);\n    });\n  }\n}\nStoreServiceImplDev.ɵfac = function StoreServiceImplDev_Factory(t) {\n  return new (t || StoreServiceImplDev)();\n};\nStoreServiceImplDev.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: StoreServiceImplDev,\n  factory: StoreServiceImplDev.ɵfac,\n  providedIn: 'root'\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}