{"ast":null,"code":"import { EventsUtil } from './../../utils/events.util';\n// Angular imports\nimport 'reflect-metadata';\nimport { EnviromentUtil } from '../../utils/enviroment.util';\n/**\n *  Loads value from Chrome settings storage, or sets default value if provided\n *  or common backup scenario  for given type.\n *  Sends value into Chrome settings storage if value is changed.\n*/\nexport const Setting = params => (target, propertyKey) => {\n  // should run only 1st time during class init, after that all annotated values should not be undefined\n  SettingDecorator.getInstance().loadValue(target, propertyKey, params === undefined ? {} : params);\n};\nexport class SettingDecorator {\n  constructor(storeService) {\n    SettingDecorator.storeService = storeService;\n  }\n  static getInstance() {\n    // must be solved that shitty way, because standart dependency injection comes too late\n    if (this.instance === undefined) {\n      this.instance = new SettingDecorator(EnviromentUtil.getStoreService());\n    }\n    return this.instance;\n  }\n  loadValue(target, propertyKey, params) {\n    let settingKey = params['storeKey'] === undefined ? target.constructor.name + \"-\" + propertyKey : params['storeKey'];\n    SettingDecorator.storeService.load(settingKey).then(resolve => {\n      // undefined should be edge case\n      return resolve;\n    }).catch(error => {\n      // communication error or not found in store should be that case\n      return undefined;\n    }).then(result => {\n      let fieldValue;\n      if (result !== undefined && result !== null) {\n        // value was found in settings store\n        fieldValue = SettingDecorator.getOrConvertedValue(result, params, 'storeConversion');\n      } else if (SettingDecorator.hasParam(params, 'defaultValue')) {\n        // value was not found in settings store but default one exists\n        fieldValue = params['defaultValue'];\n      } else {\n        // no value and no default one, try to set one for most common types\n        fieldValue = SettingDecorator.getCommonDefaultValue(target, propertyKey);\n      }\n      //FIXME this works only for primitive types, changing a property of object does not trigger set\n      // \"decorate\" fields, replace field value by value from settings store or send updated value to settings store\n      let currentValue = Object(target)[propertyKey];\n      let uploadAllowed = !(SettingDecorator.hasParam(params, 'onlyDownload') && params['onlyDownload'] === true);\n      Object.defineProperty(target, propertyKey, {\n        get: function () {\n          return currentValue === undefined || currentValue === null ? fieldValue : currentValue;\n        },\n        set: function (value) {\n          if (currentValue != value) {\n            currentValue = value;\n            if (uploadAllowed) {\n              EventsUtil.getSettingsSavedEmiter().emit(true);\n              SettingDecorator.storeService.save(settingKey, SettingDecorator.getOrConvertedValue(value, params, 'modelConversion')).then(result => {\n                EventsUtil.getSettingsSavedEmiter().emit(false);\n              });\n              //TODO scenarions for unsucessfull settings save\n            }\n          }\n        },\n\n        configurable: true\n      });\n      // callback function\n      params['afterExec']?.apply(this, currentValue === undefined || currentValue === null ? fieldValue : currentValue);\n    }).catch(error => {\n      console.log(error);\n    });\n  }\n  static getCommonDefaultValue(target, propertyKey) {\n    let fieldType = Reflect.getMetadata(\"design:type\", target, propertyKey).name;\n    switch (fieldType) {\n      case 'Boolean':\n        return false;\n      default:\n        return null;\n    }\n  }\n  static getOrConvertedValue(valueToConvert, params, converterType) {\n    let converters = params['converter'];\n    if (converters === undefined) {\n      return valueToConvert;\n    }\n    let converter = Object(converters)[converterType];\n    if (converter === undefined) {\n      return valueToConvert;\n    }\n    return converter.call(converters, valueToConvert);\n  }\n  static hasParam(params, ...paramNames) {\n    let tmp = params;\n    for (let i = 0; i < paramNames.length; i++) {\n      tmp = tmp[paramNames[i]];\n      if (tmp === undefined) {\n        return false;\n      }\n    }\n    return true;\n  }\n}","map":{"version":3,"mappings":"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","names":["EventsUtil","EnviromentUtil","Setting","params","target","propertyKey","SettingDecorator","getInstance","loadValue","undefined","constructor","storeService","instance","getStoreService","settingKey","name","load","then","resolve","catch","error","result","fieldValue","getOrConvertedValue","hasParam","getCommonDefaultValue","currentValue","Object","uploadAllowed","defineProperty","get","set","value","getSettingsSavedEmiter","emit","save","configurable","apply","console","log","fieldType","Reflect","getMetadata","valueToConvert","converterType","converters","converter","call","paramNames","tmp","i","length"],"sourceRoot":"","sources":["/home/kovo/Documents/PROJEKTY GitHub/MongoExpressResourceOpenerNG/mongo-express-resource-opener-ng/src/app/_base/decorators/setting/setting.decorator.ts"],"sourcesContent":["import { EventsUtil } from './../../utils/events.util';\nimport { EventEmitter } from '@angular/core';\n// Angular imports\nimport 'reflect-metadata';\n\n// My imports\nimport { StoreService } from '../../services/store.service';\nimport { StoreServiceImplDev } from '../../services/store.service.impl.dev';\nimport { StoreServiceImplProd } from '../../services/store.service.impl.prod';\nimport { EnviromentUtil, RuntimeEnviroment } from '../../utils/enviroment.util';\nimport { SettingDecoratorParameters } from './setting.decorator.parameters';\nimport { SettingDecoratorConverter } from './setting.decorator.converter';\nimport { BaseComponent } from 'src/app/_base/components/_base/base.component';\n\n\n/**\n *  Loads value from Chrome settings storage, or sets default value if provided \n *  or common backup scenario  for given type.\n *  Sends value into Chrome settings storage if value is changed.\n*/\nexport const Setting = (params ?: SettingDecoratorParameters) => (target: BaseComponent, propertyKey: string) => {\n    // should run only 1st time during class init, after that all annotated values should not be undefined\n    SettingDecorator.getInstance().loadValue(target, propertyKey, (params === undefined) ? {} : params);\n}\n\n\nexport class SettingDecorator {\n\n    private static instance : SettingDecorator;\n\n    private static storeService : StoreService;\n\n    private constructor(storeService : StoreService) {\n        SettingDecorator.storeService = storeService;\n    }\n\n    public static getInstance() : SettingDecorator {\n        // must be solved that shitty way, because standart dependency injection comes too late\n        if (this.instance === undefined) {\n            this.instance = new SettingDecorator(EnviromentUtil.getStoreService())\n        }\n        return this.instance;\n    }\n\n    public loadValue(target : Object, propertyKey : string, params : SettingDecoratorParameters) : void {\n\n        let settingKey : string = params['storeKey'] === undefined\n            ? target.constructor.name + \"-\" + propertyKey \n            : params['storeKey']\n\n        SettingDecorator.storeService\n            .load(settingKey)\n            .then((resolve : any) => {\n                // undefined should be edge case\n                return resolve;\n            })\n            .catch((error : any) => {\n                // communication error or not found in store should be that case\n                return undefined;\n            })\n            .then((result : any) => {\n\n                let fieldValue : any;\n                if (result !== undefined && result !== null) {\n                    // value was found in settings store\n                    fieldValue  = SettingDecorator.getOrConvertedValue(result, params, 'storeConversion');\n                } else if (SettingDecorator.hasParam(params, 'defaultValue')) {\n                    // value was not found in settings store but default one exists\n                    fieldValue = params['defaultValue'];\n                } else {\n                    // no value and no default one, try to set one for most common types\n                    fieldValue = SettingDecorator.getCommonDefaultValue(target, propertyKey);\n                }\n\n                //FIXME this works only for primitive types, changing a property of object does not trigger set\n                // \"decorate\" fields, replace field value by value from settings store or send updated value to settings store\n                let currentValue : any = Object(target)[propertyKey];\n                let uploadAllowed : boolean = !(SettingDecorator.hasParam(params, 'onlyDownload') && params['onlyDownload'] === true);\n                Object.defineProperty(target, propertyKey, {\n                    get: function() {\n                        return (currentValue === undefined || currentValue === null) ? fieldValue : currentValue;\n                    },\n                    set: function(value) {\n                        if (currentValue != value) {\n                            currentValue = value;\n                            if (uploadAllowed) {\n                                EventsUtil.getSettingsSavedEmiter().emit(true);\n                                SettingDecorator.storeService\n                                    .save(settingKey, SettingDecorator.getOrConvertedValue(value, params, 'modelConversion'))\n                                    .then((result : any) => { EventsUtil.getSettingsSavedEmiter().emit(false); });\n                                    //TODO scenarions for unsucessfull settings save\n                            }\n                        }\n                    },\n                    configurable: true\n                })\n\n                // callback function\n                params['afterExec']?.apply(this, (currentValue === undefined || currentValue === null) ? fieldValue : currentValue);\n            })\n            .catch((error : any) => {\n                console.log(error);\n            }); \n\n    }\n\n    private static getCommonDefaultValue(target : Object, propertyKey : string) : any {\n        let fieldType : string = Reflect.getMetadata(\"design:type\", target, propertyKey).name;\n        switch(fieldType) {\n            case 'Boolean':\n                return false;\n            default:\n                return null; \n        }\n    }\n\n    private static getOrConvertedValue(valueToConvert : any, params : SettingDecoratorParameters, converterType : string) : any {\n        let converters : SettingDecoratorConverter<any, any> | undefined = params['converter'];\n        if (converters === undefined) {\n            return valueToConvert;\n        }\n        let converter : Function = Object(converters)[converterType];\n        if (converter === undefined) {\n            return valueToConvert;\n        }\n        return converter.call(converters, valueToConvert);\n    }\n\n    private static hasParam(params: SettingDecoratorParameters, ...paramNames : string[]) : boolean {\n        let tmp : any = params;\n        for (let i=0; i<paramNames.length; i++) {\n            tmp = tmp[paramNames[i]];\n            if (tmp === undefined) {\n                return false;\n            } \n        }\n        return true;\n    }\n    \n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}