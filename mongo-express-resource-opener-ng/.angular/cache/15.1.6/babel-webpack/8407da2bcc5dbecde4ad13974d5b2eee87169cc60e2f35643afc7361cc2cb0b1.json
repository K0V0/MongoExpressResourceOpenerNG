{"ast":null,"code":"import { EnviromentUtil, SettingsNames } from 'src/app/_base/utils/enviroment.util';\nimport { Settings, KeyValuePair } from './query.service';\nimport * as i0 from \"@angular/core\";\nexport class QueryServiceImpl {\n  constructor() {\n    //FIXME dependency injection on various enviroments\n    this.storeService = EnviromentUtil.getStoreService();\n  }\n  open(resourceId) {\n    var context = this;\n    return new Promise((resolve, reject) => {\n      if (resourceId === undefined || resourceId === null || resourceId.trim().length < 1) {\n        reject(false);\n      } else {\n        context.check(resourceId);\n      }\n    });\n  }\n  check(resourceId) {\n    var context = this;\n    // return new Promise((resolve, reject) => {\n    // });\n    return Promise.all([context.loadAllSettings()]).then(settings => {\n      console.log(settings);\n      context.fireRequests(resourceId, context.getRequestsToFire(settings));\n      //console.log('all settings resolved promises loaded');\n      //console.log(result);\n    });\n  }\n\n  fireRequests(resourceId, requests) {\n    return new Promise((resolve, reject) => {});\n  }\n  getRequestsToFire(settings) {\n    console.assert.log();\n    console.log(settings.filter(setting => Object.keys(setting)[0] === SettingsNames.ENVIROMENTS).flatMap(setting => setting[SettingsNames.ENVIROMENTS])\n    //.filter((enviroment : DataSetsStoreRecordFormat) => enviroment.id)\n    .flatMap(enviroment => enviroment.datasets));\n    return [];\n  }\n  loadAllSettings() {\n    return new Promise((resolve, reject) => {\n      let settingsPromises = [];\n      Object.values(SettingsNames).forEach(settingName => {\n        settingsPromises.push(this.storeService.loadWithKey(settingName));\n      });\n      Promise.allSettled(settingsPromises).then(results => {\n        // console.log('all settings promises settled');\n        //console.log(results);\n        // let settings : any = results\n        //     .filter((result) => result.status === 'fulfilled')\n        //     .map((result) => result.value);\n        let settings = [];\n        results.forEach(result => {\n          // console.log(result.status);\n          if (result.status === 'fulfilled') {\n            // console.log(result.value);\n            console.log(result.value);\n            settings.push(result.value);\n          }\n        });\n        console.log(settings);\n        resolve(settings);\n      }).catch(() => {\n        reject('Error during loading settings from store - promises settling');\n      });\n    });\n  }\n}\nQueryServiceImpl.ɵfac = function QueryServiceImpl_Factory(t) {\n  return new (t || QueryServiceImpl)();\n};\nQueryServiceImpl.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: QueryServiceImpl,\n  factory: QueryServiceImpl.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["EnviromentUtil","SettingsNames","Settings","KeyValuePair","QueryServiceImpl","constructor","storeService","getStoreService","open","resourceId","context","Promise","resolve","reject","undefined","trim","length","check","all","loadAllSettings","then","settings","console","log","fireRequests","getRequestsToFire","requests","assert","filter","setting","Object","keys","ENVIROMENTS","flatMap","enviroment","datasets","settingsPromises","values","forEach","settingName","push","loadWithKey","allSettled","results","result","status","value","catch","factory","providedIn"],"sourceRoot":"","sources":["/home/kovo/Documents/PROJEKTY GitHub/MongoExpressResourceOpenerNG/mongo-express-resource-opener-ng/src/app/_base/services/query.service.impl.ts"],"sourcesContent":["import { DataSetsStoreRecordFormat } from './../components/_base/data-sets/data-sets.interfaces';\nimport { environment } from './../../../environments/environment';\nimport { BaseUtil } from './../utils/base.util';\nimport { Injectable } from \"@angular/core\";\nimport { EnviromentUtil, SettingsNames } from 'src/app/_base/utils/enviroment.util';\nimport { QueryService, Settings, KeyValuePair } from './query.service';\nimport { StoreService } from './store.service';\n\n@Injectable({\n    providedIn : 'root'\n})\nexport class QueryServiceImpl implements QueryService {\n\n    private storeService : StoreService;\n    \n    constructor() {\n        //FIXME dependency injection on various enviroments\n        this.storeService = EnviromentUtil.getStoreService();\n    }\n\n\n    public open(resourceId : string | undefined) : Promise<boolean> {\n        var context = this;\n        return new Promise((resolve, reject) => {\n            if (resourceId === undefined || resourceId === null || resourceId.trim().length < 1) {\n                reject(false);\n            } else {\n                context.check(resourceId)\n            }\n        });\n    }\n\n\n    private check(resourceId : string) : Promise<any> {\n        var context = this;\n        // return new Promise((resolve, reject) => {\n\n        // });\n        return Promise.all([\n            context.loadAllSettings()\n        ])\n        .then((settings : Settings) => {\n            console.log(settings);\n            context.fireRequests(resourceId, context.getRequestsToFire(settings))\n            //console.log('all settings resolved promises loaded');\n            //console.log(result);\n            \n        });\n    }\n\n    private fireRequests(resourceId : string, requests : string[]) : Promise<any> {\n        return new Promise((resolve, reject) => { \n\n        });\n    }\n\n    private getRequestsToFire(settings : Settings) : string[] {\n        console.assert.log()\n\n        console.log(\n        settings\n            .filter((setting : KeyValuePair) => Object.keys(setting)[0] === SettingsNames.ENVIROMENTS)\n            .flatMap((setting : KeyValuePair) => setting[SettingsNames.ENVIROMENTS])\n            //.filter((enviroment : DataSetsStoreRecordFormat) => enviroment.id)\n            .flatMap((enviroment : DataSetsStoreRecordFormat) => enviroment.datasets));\n\n            return [];\n    }\n\n    private loadAllSettings() : Promise<Settings> {\n        return new Promise((resolve, reject) => {\n\n            let settingsPromises : Promise<KeyValuePair>[] = [];\n            Object.values(SettingsNames).forEach((settingName : string) => {\n                settingsPromises.push(this.storeService.loadWithKey(settingName));\n            })\n\n            Promise.allSettled(settingsPromises).then((results) => {\n                // console.log('all settings promises settled');\n                //console.log(results);\n                // let settings : any = results\n                //     .filter((result) => result.status === 'fulfilled')\n                //     .map((result) => result.value);\n                let settings : Settings = []; \n                results.forEach((result) => {\n                    // console.log(result.status);\n                    if (result.status === 'fulfilled') {\n                        // console.log(result.value);\n                        console.log(result.value);\n                        settings.push(result.value);\n                    }\n                });\n\n                console.log(settings);\n\n                resolve(settings);\n            }).catch(() => {\n                reject('Error during loading settings from store - promises settling');\n            })\n\n        });\n    }\n\n    // private extractSetting(settings : any, settingType : SettingsNames) : any {\n    //     return settings.find((setting) => Object.keys(setting).includes(settingType))\n    // }\n\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}