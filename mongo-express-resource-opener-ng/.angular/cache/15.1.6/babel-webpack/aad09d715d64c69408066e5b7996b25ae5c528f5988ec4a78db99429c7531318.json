{"ast":null,"code":"export class DataSetsSettingDecoratorConverter {\n  modelConversion(content) {\n    return content.map(x => {\n      let row = {};\n      row.id = x.id;\n      return row;\n    });\n    // let result : DataSetsStoreRecordFormat[] = [];\n    // for (let i=0; i<content.length; i++) {\n    //     result[i]['id'] = content[i]['id'];\n    //     result[i]['name'] = content[i]['name'];\n    //     result[i]['datasets'] = content[i]['datasets'].trim().split('\\n').map((x) => x.trim());\n    // }\n    // return result;\n  }\n\n  storeConversion(content) {\n    let result = [];\n    console.log(\"data-sets-decorator-converter\");\n    console.log(result);\n    console.log(result[0]);\n    for (let i = 0; i < content.length; i++) {\n      result[i]['id'] = content[i]['id'];\n      result[i]['name'] = content[i]['name'];\n      result[i]['datasets'] = content[i]['datasets'].join('\\n');\n    }\n    return result;\n  }\n}","map":{"version":3,"mappings":"AAkBA,OAAM,MAAOA,iCAAiC;EAG1CC,eAAe,CAACC,OAA6B;IACzC,OAAOA,OAAO,CAACC,GAAG,CAAEC,CAAC,IAAI;MACrB,IAAIC,GAAG,GAA+B,EAAE;MACxCA,GAAG,CAACC,EAAE,GAAGF,CAAC,CAACE,EAAE;MACb,OAAOD,GAAG;IACd,CAAC,CAAC;IACF;IACA;IACA;IACA;IACA;IACA;IACA;EACJ;;EAEAE,eAAe,CAACL,OAAqC;IACjD,IAAIM,MAAM,GAAmC,EAAE;IAC/CC,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;IAC5CD,OAAO,CAACC,GAAG,CAACF,MAAM,CAAC;IACnBC,OAAO,CAACC,GAAG,CAACF,MAAM,CAAC,CAAC,CAAC,CAAC;IACtB,KAAK,IAAIG,CAAC,GAAC,CAAC,EAAEA,CAAC,GAACT,OAAO,CAACU,MAAM,EAAED,CAAC,EAAE,EAAE;MACjCH,MAAM,CAACG,CAAC,CAAC,CAAC,IAAI,CAAC,GAAGT,OAAO,CAACS,CAAC,CAAC,CAAC,IAAI,CAAC;MAClCH,MAAM,CAACG,CAAC,CAAC,CAAC,MAAM,CAAC,GAAGT,OAAO,CAACS,CAAC,CAAC,CAAC,MAAM,CAAC;MACtCH,MAAM,CAACG,CAAC,CAAC,CAAC,UAAU,CAAC,GAAGT,OAAO,CAACS,CAAC,CAAC,CAAC,UAAU,CAAC,CAACE,IAAI,CAAC,IAAI,CAAC;;IAE7D,OAAOL,MAAM;EACjB","names":["DataSetsSettingDecoratorConverter","modelConversion","content","map","x","row","id","storeConversion","result","console","log","i","length","join"],"sourceRoot":"","sources":["/home/matej/Dokumenty/PROJEKTY GitHub/MongoExpressResourceOpenerNG/mongo-express-resource-opener-ng/src/app/options/components/data-sets/data-sets.setting.decorator.converter.ts"],"sourcesContent":["import { SettingDecoratorConverter } from 'src/app/_base/decorators/setting.decorator';\n\ninterface DataSetsNgModelRecordFormat {\n    id : string;\n    name : string;\n    datasets : string;\n}\n\ntype DataSetsNgModelType = DataSetsNgModelRecordFormat[];\n\ninterface DataSetsStoreRecordFormat {\n    id : string;\n    name : string;\n    datasets : string[];\n}\n\ntype DataSetsStoreType = DataSetsStoreRecordFormat[];\n\nexport class DataSetsSettingDecoratorConverter \n    implements SettingDecoratorConverter<DataSetsNgModelType, DataSetsStoreType> \n{\n    modelConversion(content : DataSetsNgModelType) : DataSetsStoreType {\n        return content.map((x) => {\n            let row : DataSetsStoreRecordFormat = {};\n            row.id = x.id\n            return row;\n        })\n        // let result : DataSetsStoreRecordFormat[] = [];\n        // for (let i=0; i<content.length; i++) {\n        //     result[i]['id'] = content[i]['id'];\n        //     result[i]['name'] = content[i]['name'];\n        //     result[i]['datasets'] = content[i]['datasets'].trim().split('\\n').map((x) => x.trim());\n        // }\n        // return result;\n    }\n\n    storeConversion(content : DataSetsStoreRecordFormat[]) : DataSetsNgModelRecordFormat[] {\n        let result : DataSetsNgModelRecordFormat[] = [];\n        console.log(\"data-sets-decorator-converter\");\n        console.log(result);\n        console.log(result[0]);\n        for (let i=0; i<content.length; i++) {\n            result[i]['id'] = content[i]['id'];\n            result[i]['name'] = content[i]['name'];\n            result[i]['datasets'] = content[i]['datasets'].join('\\n');\n        }\n        return result;\n    }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}