{"ast":null,"code":"import { __decorate, __metadata } from \"tslib\";\nimport { EventsUtil } from './../../../_base/utils/events.util';\nimport { BaseUtil } from './../../../_base/utils/base.util';\nimport { isEqual } from 'lodash';\n// My imports\nimport { BaseComponent } from \"src/app/_base/components/_base/base.component\";\nimport { Setting } from 'src/app/_base/decorators/setting/setting.decorator';\nimport { StoreServiceImplDev } from 'src/app/_base/services/store.service.impl.dev';\nimport { StoreServiceImplProd } from 'src/app/_base/services/store.service.impl.prod';\nimport { EnviromentUtil, RuntimeEnviroment } from 'src/app/_base/utils/enviroment.util';\nimport { DataSetsSettingDecoratorConverter } from './data-sets.setting.decorator.converter';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/forms\";\nfunction DataSetsComponent_article_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"article\");\n    i0.ɵɵelement(1, \"input\", 1);\n    i0.ɵɵelementStart(2, \"input\", 2);\n    i0.ɵɵlistener(\"ngModelChange\", function DataSetsComponent_article_0_Template_input_ngModelChange_2_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const enviroment_r1 = restoredCtx.$implicit;\n      return i0.ɵɵresetView(enviroment_r1.name = $event);\n    })(\"ngModelChange\", function DataSetsComponent_article_0_Template_input_ngModelChange_2_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.change());\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"button\", 3);\n    i0.ɵɵlistener(\"click\", function DataSetsComponent_article_0_Template_button_click_3_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.removeEnviroment($event));\n    });\n    i0.ɵɵtext(4, \"Odstr\\u00E1ni\\u0165 prostredie\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(5, \"br\");\n    i0.ɵɵelementStart(6, \"textarea\", 4);\n    i0.ɵɵlistener(\"ngModelChange\", function DataSetsComponent_article_0_Template_textarea_ngModelChange_6_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const enviroment_r1 = restoredCtx.$implicit;\n      return i0.ɵɵresetView(enviroment_r1.datasets = $event);\n    })(\"ngModelChange\", function DataSetsComponent_article_0_Template_textarea_ngModelChange_6_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r8.change());\n    });\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const enviroment_r1 = ctx.$implicit;\n    const i_r2 = ctx.index;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"name\", \"enviromentId_\" + i_r2)(\"value\", enviroment_r1.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"name\", \"enviromentName_\" + i_r2)(\"ngModel\", enviroment_r1.name);\n    i0.ɵɵadvance(1);\n    i0.ɵɵclassMap(ctx_r0.isLastEnviroment() ? \"disabled\" : \"\");\n    i0.ɵɵproperty(\"name\", \"enviromentRemove_\" + i_r2)(\"value\", enviroment_r1.id);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"name\", \"enviromentDatasets_\" + i_r2)(\"ngModel\", enviroment_r1.datasets);\n  }\n}\nexport class DataSetsComponent extends BaseComponent {\n  constructor() {\n    super();\n    //FIXME dependency injection based on env must exist in angular too\n    this.storeService = EnviromentUtil.runningAt() === RuntimeEnviroment.WEB ? new StoreServiceImplDev() : new StoreServiceImplProd();\n    this.converter = new DataSetsSettingDecoratorConverter();\n  }\n  change() {\n    this.autosave();\n  }\n  addEnvitoment() {\n    this.createNewEnvArticle();\n  }\n  removeEnviroment(event) {\n    this.removeEnvArticle(event.target.value);\n  }\n  isLastEnviroment() {\n    return this.enviroments !== undefined && this.enviroments.length < 2;\n  }\n  //FIXME ugly hack because decorator (or more probably me) is unable to detect change\n  // when properties of object are changed, whole annotation is useful only for primitive types\n  autosave() {\n    if (!isEqual(this.enviromentsBefore, this.enviroments)) {\n      let context = this;\n      clearTimeout(this.timer);\n      this.timer = setTimeout(function () {\n        context.enviroments = BaseUtil.deepClone(context.enviroments);\n        // EventsUtil.getSettingsSavedEmiter().emit(true);\n        // context.storeService.save('enviroments', context.converter.modelConversion(context.enviroments))\n        //     .then((result : any) => { EventsUtil.getSettingsSavedEmiter().emit(false); });\n      }, DataSetsComponent.FIRE_TRESHOLD_MILISECONDS);\n    }\n  }\n  createNewEnvArticle() {\n    let maxId = this.enviroments?.map(env => env.id).reduce((prev, curr) => prev > curr ? prev : curr);\n    let nextEnv = BaseUtil.deepClone(DataSetsComponent.DEFAULT_VALUE);\n    nextEnv.id = maxId === undefined ? 0 : maxId + 1;\n    nextEnv.name += \"_\" + nextEnv.id;\n    // appends to current enviromets settings section but do not save to store yet\n    this.enviroments?.push(nextEnv);\n    // update options list in select current enviroment dropdown\n    EventsUtil.notifySettingsEnviromentsChanged(this.enviroments);\n  }\n  removeEnvArticle(id) {\n    let indexToRemove = this.enviroments?.indexOf(this.enviroments?.find(x => x.id === id)) ?? -1;\n    // removes from settings list\n    this.enviroments?.splice(indexToRemove, 1);\n    // propagete this change to store\n    this.change();\n    // update options list in select current enviroment dropdown\n    EventsUtil.notifySettingsEnviromentsChanged(this.enviroments);\n  }\n}\nDataSetsComponent.FIRE_TRESHOLD_MILISECONDS = 1000;\nDataSetsComponent.DEFAULT_VALUE = {\n  id: 0,\n  name: \"Základné prostredie\",\n  datasets: \"http://example.com/data\"\n};\nDataSetsComponent.ɵfac = function DataSetsComponent_Factory(t) {\n  return new (t || DataSetsComponent)();\n};\nDataSetsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: DataSetsComponent,\n  selectors: [[\"component-data-sets\"]],\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 1,\n  vars: 1,\n  consts: [[4, \"ngFor\", \"ngForOf\"], [\"type\", \"hidden\", 3, \"name\", \"value\"], [\"type\", \"text\", \"placeholder\", \"N\\u00E1zov prostredia...\", 3, \"name\", \"ngModel\", \"ngModelChange\"], [\"type\", \"button\", 3, \"name\", \"value\", \"click\"], [\"cols\", \"80\", \"rows\", \"5\", \"placeholder\", \"D\\u00E1tov\\u00E9 zdroje...\", 3, \"name\", \"ngModel\", \"ngModelChange\"]],\n  template: function DataSetsComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, DataSetsComponent_article_0_Template, 7, 10, \"article\", 0);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngForOf\", ctx.enviroments);\n    }\n  },\n  dependencies: [i1.NgForOf, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgModel],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\", \"section[_ngcontent-%COMP%] {\\n  margin: 1.25em 0;\\n}\\n\\narticle[_ngcontent-%COMP%] {\\n  margin: 0.5em 0em;\\n}\\n\\narticle[_ngcontent-%COMP%]:first-of-type {\\n  margin-top: 1em;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvb3B0aW9ucy9vcHRpb25zLmNvbXBvbmVudC5zY3NzIiwid2VicGFjazovLy4vLi4vLi4vLi4vUFJPSkVLVFklMjBHaXRIdWIvTW9uZ29FeHByZXNzUmVzb3VyY2VPcGVuZXJORy9tb25nby1leHByZXNzLXJlc291cmNlLW9wZW5lci1uZy9zcmMvYXBwL29wdGlvbnMvb3B0aW9ucy5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLGdCQUFBO0FDQ0o7O0FERUE7RUFDSSxpQkFBQTtBQ0NKOztBREVBO0VBQ0ksZUFBQTtBQ0NKIiwic291cmNlc0NvbnRlbnQiOlsic2VjdGlvbiB7XG4gICAgbWFyZ2luOiAxLjI1ZW0gMDtcbn1cblxuYXJ0aWNsZSB7XG4gICAgbWFyZ2luOiAwLjVlbSAwZW07XG59XG5cbmFydGljbGU6Zmlyc3Qtb2YtdHlwZSB7XG4gICAgbWFyZ2luLXRvcDogMWVtO1xufSIsInNlY3Rpb24ge1xuICBtYXJnaW46IDEuMjVlbSAwO1xufVxuXG5hcnRpY2xlIHtcbiAgbWFyZ2luOiAwLjVlbSAwZW07XG59XG5cbmFydGljbGU6Zmlyc3Qtb2YtdHlwZSB7XG4gIG1hcmdpbi10b3A6IDFlbTtcbn0iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n});\n__decorate([Setting({\n  defaultValue: [DataSetsComponent.DEFAULT_VALUE],\n  storeKey: 'enviroments',\n  converter: new DataSetsSettingDecoratorConverter() //,\n  //onlyDownload: true, // will not work either for objects\n}), __metadata(\"design:type\", Object)], DataSetsComponent.prototype, \"enviroments\", void 0);\n__decorate([Setting({\n  defaultValue: [DataSetsComponent.DEFAULT_VALUE],\n  storeKey: 'enviroments',\n  converter: new DataSetsSettingDecoratorConverter(),\n  onlyDownload: true // will not work either for objects\n}), __metadata(\"design:type\", Object)], DataSetsComponent.prototype, \"enviromentsBefore\", void 0);","map":{"version":3,"mappings":"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","names":["EventsUtil","BaseUtil","isEqual","BaseComponent","Setting","StoreServiceImplDev","StoreServiceImplProd","EnviromentUtil","RuntimeEnviroment","DataSetsSettingDecoratorConverter","i0","DataSetsComponent","constructor","storeService","runningAt","WEB","converter","change","autosave","addEnvitoment","createNewEnvArticle","removeEnviroment","event","removeEnvArticle","target","value","isLastEnviroment","enviroments","undefined","length","enviromentsBefore","context","clearTimeout","timer","setTimeout","deepClone","FIRE_TRESHOLD_MILISECONDS","maxId","map","env","id","reduce","prev","curr","nextEnv","DEFAULT_VALUE","name","push","notifySettingsEnviromentsChanged","indexToRemove","indexOf","find","x","splice","datasets","selectors","features","decls","vars","consts","template","__decorate","defaultValue","storeKey","onlyDownload"],"sourceRoot":"","sources":["/home/kovo/Documents/PROJEKTY GitHub/MongoExpressResourceOpenerNG/mongo-express-resource-opener-ng/src/app/options/components/data-sets/data-sets.component.ts","/home/kovo/Documents/PROJEKTY GitHub/MongoExpressResourceOpenerNG/mongo-express-resource-opener-ng/src/app/options/components/data-sets/data-sets.component.html"],"sourcesContent":["import { environment } from './../../../../environments/environment';\nimport { EventsUtil } from './../../../_base/utils/events.util';\nimport { BaseUtil } from './../../../_base/utils/base.util';\n// Angular imports\nimport { Component, EventEmitter, Output } from \"@angular/core\";\nimport { isEqual } from 'lodash';\n\n// My imports\nimport { BaseComponent } from \"src/app/_base/components/_base/base.component\";\nimport { DataSetsNgModelRecordFormat, DataSetsNgModelType } from 'src/app/_base/components/_base/data-sets/data-sets.interfaces';\nimport { Setting, SettingDecorator } from 'src/app/_base/decorators/setting/setting.decorator';\nimport { StoreServiceImplDev } from 'src/app/_base/services/store.service.impl.dev';\nimport { StoreServiceImplProd } from 'src/app/_base/services/store.service.impl.prod';\nimport { EnviromentUtil, RuntimeEnviroment } from 'src/app/_base/utils/enviroment.util';\nimport { StoreService } from './../../../_base/services/store.service';\nimport { DataSetsSettingDecoratorConverter } from './data-sets.setting.decorator.converter';\n\n\n@Component({\n    selector: 'component-data-sets',\n    templateUrl: './data-sets.component.html',\n    styleUrls: [\n        './data-sets.component.scss',\n        './../../options.component.scss'\n    ]\n})\nexport class DataSetsComponent extends BaseComponent {\n\n    private static readonly FIRE_TRESHOLD_MILISECONDS : number = 1000;\n\n    public static readonly DEFAULT_VALUE : DataSetsNgModelRecordFormat = {\n        id: 0,\n        name: \"Základné prostredie\",\n        datasets: \"http://example.com/data\"\n    };\n\n    @Setting({\n        defaultValue: [ DataSetsComponent.DEFAULT_VALUE ],\n        storeKey: 'enviroments',\n        converter: new DataSetsSettingDecoratorConverter()//,\n        //onlyDownload: true, // will not work either for objects\n    })\n    public enviroments !: DataSetsNgModelType;\n\n    @Setting({\n        defaultValue: [ DataSetsComponent.DEFAULT_VALUE ],\n        storeKey: 'enviroments',\n        converter: new DataSetsSettingDecoratorConverter(),\n        onlyDownload: true, // will not work either for objects\n    })\n    private enviromentsBefore !: DataSetsNgModelType;\n\n    private storeService : StoreService;\n\n    private converter : DataSetsSettingDecoratorConverter;\n\n    private timer : any;\n\n    constructor() {\n        super();\n        //FIXME dependency injection based on env must exist in angular too\n        this.storeService = EnviromentUtil.runningAt() === RuntimeEnviroment.WEB ? new StoreServiceImplDev() : new StoreServiceImplProd();\n        this.converter = new DataSetsSettingDecoratorConverter();\n    }\n\n\n    public change() : void {\n        this.autosave();\n    }\n\n    public addEnvitoment() : void {\n        this.createNewEnvArticle();\n    }\n\n    public removeEnviroment(event : any) : void {\n        this.removeEnvArticle(event.target.value);\n    }\n\n    public isLastEnviroment() : boolean {\n        return this.enviroments !== undefined && this.enviroments.length < 2;\n    }\n\n\n    //FIXME ugly hack because decorator (or more probably me) is unable to detect change\n    // when properties of object are changed, whole annotation is useful only for primitive types\n    private autosave() : void {\n        if (!isEqual(this.enviromentsBefore, this.enviroments)) {\n            let context = this;\n            clearTimeout(this.timer);\n            this.timer = setTimeout(function() {\n                context.enviroments = BaseUtil.deepClone(context.enviroments);\n                // EventsUtil.getSettingsSavedEmiter().emit(true);\n                // context.storeService.save('enviroments', context.converter.modelConversion(context.enviroments))\n                //     .then((result : any) => { EventsUtil.getSettingsSavedEmiter().emit(false); });\n            }, DataSetsComponent.FIRE_TRESHOLD_MILISECONDS);\n        } \n    }\n\n    private createNewEnvArticle() : void {\n        let maxId : number | undefined = this.enviroments\n            ?.map((env) => env.id)\n            .reduce((prev, curr) => prev > curr ? prev : curr);\n        let nextEnv = BaseUtil.deepClone(DataSetsComponent.DEFAULT_VALUE);\n        nextEnv.id = (maxId === undefined) ? 0 : maxId + 1;\n        nextEnv.name += (\"_\" + nextEnv.id);\n        // appends to current enviromets settings section but do not save to store yet\n        this.enviroments?.push(nextEnv);\n        // update options list in select current enviroment dropdown\n        EventsUtil.notifySettingsEnviromentsChanged(this.enviroments);\n    }\n\n    private removeEnvArticle(id : number) : void {\n        let indexToRemove = this.enviroments?.indexOf(\n            this.enviroments?.find((x) => x.id === id) as DataSetsNgModelRecordFormat) ?? -1;\n        // removes from settings list\n        this.enviroments?.splice(indexToRemove, 1);\n        // propagete this change to store\n        this.change();\n        // update options list in select current enviroment dropdown\n        EventsUtil.notifySettingsEnviromentsChanged(this.enviroments);\n    };\n}\n","<article *ngFor=\"let enviroment of enviroments; index as i;\">\n\n    <input \n        type=\"hidden\"\n        [name]=\"'enviromentId_' + i\"\n        [value]=\"enviroment.id\">\n\n    <input \n        type=\"text\" \n        placeholder=\"Názov prostredia...\" \n        [name]=\"'enviromentName_' + i\"\n        [(ngModel)]=\"enviroment.name\"\n        (ngModelChange)=\"change()\">\n\n    <button \n        type=\"button\"\n        [class]=\"isLastEnviroment() ? 'disabled' : ''\" \n        [name]=\"'enviromentRemove_' + i\"\n        [value]=\"enviroment.id\"\n        (click)=\"removeEnviroment($event);\"\n        >Odstrániť prostredie</button>\n\n    <br>\n\n    <textarea \n        cols=\"80\" rows=\"5\" \n        placeholder=\"Dátové zdroje...\" \n        [name]=\"'enviromentDatasets_' + i\"\n        [(ngModel)]=\"enviroment.datasets\"\n        (ngModelChange)=\"change()\"></textarea>\n\n</article>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}