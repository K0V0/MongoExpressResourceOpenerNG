{"ast":null,"code":"import { SettingDecoratorConverterBase } from 'src/app/_base/decorators/setting.decorator';\nexport class DataSetsSettingDecoratorConverter\n//implements SettingDecoratorConverter<DataSetsNgModelType, DataSetsStoreType> \nextends SettingDecoratorConverterBase {\n  mapForNgModel(content) {\n    throw new Error('Method not implemented.');\n  }\n  mapForStore(content) {\n    throw new Error('Method not implemented.');\n  }\n}","map":{"version":3,"mappings":"AACA,SAAoCA,6BAA6B,QAAQ,4CAA4C;AAGrH,OAAM,MAAQC;AACN;AAAA,QACQD,6BAAqE;EAEvEE,aAAa,CAACC,OAA0B;IAC9C,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;EAC9C;EACUC,WAAW,CAACF,OAA4B;IAC9C,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;EAC9C","names":["SettingDecoratorConverterBase","DataSetsSettingDecoratorConverter","mapForNgModel","content","Error","mapForStore"],"sourceRoot":"","sources":["/home/matej/Dokumenty/PROJEKTY GitHub/MongoExpressResourceOpenerNG/mongo-express-resource-opener-ng/src/app/options/components/data-sets/data-sets.setting.decorator.converter.ts"],"sourcesContent":["import { DataSetsNgModelType, DataSetsStoreType } from 'src/app/_base/components/_base/data-sets/data-sets.interfaces';\nimport { SettingDecoratorConverter, SettingDecoratorConverterBase } from 'src/app/_base/decorators/setting.decorator';\n\n\nexport  class DataSetsSettingDecoratorConverter \n        //implements SettingDecoratorConverter<DataSetsNgModelType, DataSetsStoreType> \n        extends SettingDecoratorConverterBase<DataSetsNgModelType, DataSetsStoreType>\n{\n    protected mapForNgModel(content: DataSetsStoreType) {\n        throw new Error('Method not implemented.');\n    }\n    protected mapForStore(content: DataSetsNgModelType) {\n        throw new Error('Method not implemented.');\n    }\n    // modelConversion(content : DataSetsNgModelType) : DataSetsStoreType {\n    //     //TODO shouldnt I be able DRY this by some custom method decorator (annotation) ?\n    //     if (content === undefined) {\n    //         return undefined;\n    //     }\n    //     return content\n    //         .map((x) => ({\n    //             id: x.id,\n    //             name: x.name,\n    //             datasets: x.datasets.trim().split('\\n').map((x) => x.trim())\n    //         }));\n    // }\n\n    // storeConversion(content : DataSetsStoreType) : DataSetsNgModelType {\n    //     if (content === undefined) {\n    //         return undefined;\n    //     }\n    //     return content\n    //         .map((x) => ({\n    //             id: x.id,\n    //             name: x.name,\n    //             datasets: x.datasets.join('\\n')\n    //         }));\n    // }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}