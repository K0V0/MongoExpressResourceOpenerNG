{"ast":null,"code":"import { __decorate, __metadata } from \"tslib\";\nimport { SettingsNames } from './../../../_base/utils/enviroment.util';\nimport { isEqual } from 'lodash';\n// My imports\nimport { BaseUtil } from './../../../_base/utils/base.util';\nimport { EventsUtil } from './../../../_base/utils/events.util';\nimport { BaseComponent } from \"src/app/_base/components/_base/base.component\";\nimport { Setting } from 'src/app/_base/decorators/setting/setting.decorator';\nimport { DataSetsSettingDecoratorConverter } from './data-sets.setting.decorator.converter';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/forms\";\nfunction DataSetsComponent_article_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"article\");\n    i0.ɵɵelement(1, \"input\", 1);\n    i0.ɵɵelementStart(2, \"input\", 2);\n    i0.ɵɵlistener(\"ngModelChange\", function DataSetsComponent_article_0_Template_input_ngModelChange_2_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const enviroment_r1 = restoredCtx.$implicit;\n      return i0.ɵɵresetView(enviroment_r1.name = $event);\n    })(\"ngModelChange\", function DataSetsComponent_article_0_Template_input_ngModelChange_2_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.change());\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"button\", 3);\n    i0.ɵɵlistener(\"click\", function DataSetsComponent_article_0_Template_button_click_3_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.removeEnviroment($event));\n    });\n    i0.ɵɵtext(4, \"Odstr\\u00E1ni\\u0165 prostredie\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(5, \"br\");\n    i0.ɵɵelementStart(6, \"textarea\", 4);\n    i0.ɵɵlistener(\"ngModelChange\", function DataSetsComponent_article_0_Template_textarea_ngModelChange_6_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const enviroment_r1 = restoredCtx.$implicit;\n      return i0.ɵɵresetView(enviroment_r1.datasets = $event);\n    })(\"ngModelChange\", function DataSetsComponent_article_0_Template_textarea_ngModelChange_6_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r8.change());\n    });\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const enviroment_r1 = ctx.$implicit;\n    const i_r2 = ctx.index;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"name\", \"enviromentId_\" + i_r2)(\"value\", enviroment_r1.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"name\", \"enviromentName_\" + i_r2)(\"ngModel\", enviroment_r1.name);\n    i0.ɵɵadvance(1);\n    i0.ɵɵclassMap(ctx_r0.isLastEnviroment() ? \"disabled\" : \"\");\n    i0.ɵɵproperty(\"name\", \"enviromentRemove_\" + i_r2)(\"value\", enviroment_r1.id);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"name\", \"enviromentDatasets_\" + i_r2)(\"ngModel\", enviroment_r1.datasets);\n  }\n}\nexport class DataSetsComponent extends BaseComponent {\n  change() {\n    this.autosaveEnvs();\n  }\n  addEnvitoment() {\n    this.createNewEnvArticle();\n  }\n  removeEnviroment(event) {\n    this.removeEnvArticle(event.target.value);\n  }\n  isLastEnviroment() {\n    return this.enviroments !== undefined && this.enviroments.length < 2;\n  }\n  autosaveEnvs() {\n    if (!isEqual(this.enviromentsBefore, this.enviroments)) {\n      let context = this;\n      clearTimeout(this.timer);\n      this.timer = setTimeout(function () {\n        //FIXME hack because decorator's implementation is unable to detect changes \n        // if is object and only attributes are changed\n        context.enviroments = BaseUtil.deepClone(context.enviroments);\n      }, DataSetsComponent.FIRE_TRESHOLD_MILISECONDS);\n    }\n  }\n  createNewEnvArticle() {\n    let maxId = this.enviroments?.map(env => env.id).reduce((prev, curr) => prev > curr ? prev : curr);\n    let nextEnv = BaseUtil.deepClone(DataSetsComponent.DEFAULT_VALUE);\n    nextEnv.id = maxId === undefined ? 0 : maxId + 1;\n    nextEnv.name += \"_\" + nextEnv.id;\n    // appends to current enviromets settings section but do not save to store yet\n    this.enviroments?.push(nextEnv);\n    // update options list in select current enviroment dropdown\n    EventsUtil.notifySettingsEnviromentsChanged(this.enviroments);\n  }\n  removeEnvArticle(id) {\n    let indexToRemove = this.enviroments?.indexOf(this.enviroments?.find(x => x.id === id)) ?? -1;\n    // removes from settings list\n    this.enviroments?.splice(indexToRemove, 1);\n    // propagete this change to store\n    this.change();\n    // update options list in select current enviroment dropdown\n    EventsUtil.notifySettingsEnviromentsChanged(this.enviroments);\n  }\n}\nDataSetsComponent.FIRE_TRESHOLD_MILISECONDS = 1000;\nDataSetsComponent.DEFAULT_VALUE = {\n  id: 0,\n  name: \"Základné prostredie\",\n  datasets: \"http://example.com/data\"\n};\nDataSetsComponent.ɵfac = /*@__PURE__*/function () {\n  let ɵDataSetsComponent_BaseFactory;\n  return function DataSetsComponent_Factory(t) {\n    return (ɵDataSetsComponent_BaseFactory || (ɵDataSetsComponent_BaseFactory = i0.ɵɵgetInheritedFactory(DataSetsComponent)))(t || DataSetsComponent);\n  };\n}();\nDataSetsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: DataSetsComponent,\n  selectors: [[\"component-data-sets\"]],\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 1,\n  vars: 1,\n  consts: [[4, \"ngFor\", \"ngForOf\"], [\"type\", \"hidden\", 3, \"name\", \"value\"], [\"type\", \"text\", \"placeholder\", \"N\\u00E1zov prostredia...\", 3, \"name\", \"ngModel\", \"ngModelChange\"], [\"type\", \"button\", 3, \"name\", \"value\", \"click\"], [\"cols\", \"80\", \"rows\", \"5\", \"placeholder\", \"D\\u00E1tov\\u00E9 zdroje...\", 3, \"name\", \"ngModel\", \"ngModelChange\"]],\n  template: function DataSetsComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, DataSetsComponent_article_0_Template, 7, 10, \"article\", 0);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngForOf\", ctx.enviroments);\n    }\n  },\n  dependencies: [i1.NgForOf, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgModel],\n  styles: [\"section[_ngcontent-%COMP%]{margin:1.25em 0}article[_ngcontent-%COMP%]{margin:.5em 0}article[_ngcontent-%COMP%]:first-of-type{margin-top:1em}\"]\n});\n__decorate([Setting({\n  defaultValue: [DataSetsComponent.DEFAULT_VALUE],\n  storeKey: SettingsNames.ENVIROMENTS,\n  converter: new DataSetsSettingDecoratorConverter()\n}), __metadata(\"design:type\", Object)], DataSetsComponent.prototype, \"enviroments\", void 0);\n__decorate([Setting({\n  defaultValue: [DataSetsComponent.DEFAULT_VALUE],\n  storeKey: SettingsNames.ENVIROMENTS,\n  converter: new DataSetsSettingDecoratorConverter(),\n  onlyDownload: true // will not work either for objects\n}), __metadata(\"design:type\", Object)], DataSetsComponent.prototype, \"enviromentsBefore\", void 0);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}