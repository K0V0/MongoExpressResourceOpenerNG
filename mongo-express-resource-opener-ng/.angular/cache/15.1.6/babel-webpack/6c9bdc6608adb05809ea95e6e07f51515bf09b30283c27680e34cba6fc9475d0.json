{"ast":null,"code":"import * as i0 from \"@angular/core\";\n/**\n *  This implementation should run on localhost development session or in webpage mode\n*/\nexport class StoreServiceImplDev {\n  constructor() {\n    this.SAVING_DELAY = 5000;\n    this.LOADING_DELAY = 1000;\n  }\n  load(key) {\n    return new Promise((resolve, reject) => {\n      if (key !== undefined && key !== null) {\n        this.loadingSimulation(String(key)).then(result => {\n          resolve(result);\n        }).catch(() => reject(\"No data found in localStorage\"));\n      } else {\n        reject(\"No key for data defined\");\n      }\n    });\n  }\n  loadWithKey(key) {\n    var context = this;\n    return new Promise((resolve, reject) => {\n      this.load(key).then(result => {\n        resolve(result);\n      }).catch(reason => reject(reason));\n    });\n  }\n  save(key, content) {\n    return new Promise((resolve, reject) => {\n      if (content !== undefined) {\n        this.saveingSimulation(String(key), content).then(result => {\n          resolve(result);\n        });\n      } else {\n        reject(\"No data passed into local storage\");\n      }\n    });\n  }\n  handleJsonNull(key) {\n    let result = localStorage.getItem(key);\n    return result === null ? \"{}\" : result;\n  }\n  loadingSimulation(key) {\n    var context = this;\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        let resultString = context.handleJsonNull(key);\n        resultString !== \"{}\" ? resolve(JSON.parse(resultString)) : reject(\"No data in localStorage\");\n      }, this.LOADING_DELAY);\n    });\n  }\n  saveingSimulation(key, value) {\n    var context = this;\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        localStorage.setItem(key, JSON.stringify(value));\n        resolve(\"dummy\");\n      }, this.SAVING_DELAY);\n    });\n  }\n}\nStoreServiceImplDev.ɵfac = function StoreServiceImplDev_Factory(t) {\n  return new (t || StoreServiceImplDev)();\n};\nStoreServiceImplDev.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: StoreServiceImplDev,\n  factory: StoreServiceImplDev.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAMA;;;AAOA,OAAM,MAAOA,mBAAmB;EAHhCC;IAKW,iBAAY,GAAG,IAAI;IACnB,kBAAa,GAAG,IAAI;;EAEpBC,IAAI,CAACC,GAAqB;IAC7B,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAI;MACnC,IAAIH,GAAG,KAAKI,SAAS,IAAIJ,GAAG,KAAK,IAAI,EAAE;QACnC,IAAI,CAACK,iBAAiB,CAACC,MAAM,CAACN,GAAG,CAAC,CAAC,CAC9BO,IAAI,CAAEC,MAAY,IAAI;UAAGN,OAAO,CAACM,MAAM,CAAC;QAAE,CAAC,CAAC,CAC5CC,KAAK,CAAC,MAAMN,MAAM,CAAC,+BAA+B,CAAC,CAAC;OAC5D,MAAM;QACHA,MAAM,CAAC,yBAAyB,CAAC;;IAEzC,CAAC,CAAC;EACN;EAEOO,WAAW,CAACV,GAAY;IAC3B,IAAIW,OAAO,GAAG,IAAI;IAClB,OAAO,IAAIV,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAI;MACnC,IAAI,CAACJ,IAAI,CAACC,GAAG,CAAC,CACTO,IAAI,CAAEC,MAAY,IAAI;QAEnBN,OAAO,CAACM,MAAM,CAAC;MACnB,CAAC,CAAC,CACDC,KAAK,CAAEG,MAAM,IAAKT,MAAM,CAACS,MAAM,CAAC,CAAC;IAC1C,CAAC,CAAC;EACN;EAEOC,IAAI,CAACb,GAAoB,EAAEc,OAAa;IAC3C,OAAO,IAAIb,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAI;MACnC,IAAIW,OAAO,KAAKV,SAAS,EAAE;QACvB,IAAI,CAACW,iBAAiB,CAACT,MAAM,CAACN,GAAG,CAAC,EAAEc,OAAO,CAAC,CACvCP,IAAI,CAAEC,MAAY,IAAI;UAAGN,OAAO,CAACM,MAAM,CAAC;QAAE,CAAC,CAAC;OACpD,MAAM;QACHL,MAAM,CAAC,mCAAmC,CAAC;;IAEnD,CAAC,CAAC;EACN;EAEQa,cAAc,CAAChB,GAAY;IAC/B,IAAIQ,MAAM,GAAmBS,YAAY,CAACC,OAAO,CAAClB,GAAG,CAAC;IACtD,OAAOQ,MAAM,KAAK,IAAI,GAAG,IAAI,GAAGA,MAAM;EAC1C;EAEQH,iBAAiB,CAACL,GAAY;IAClC,IAAIW,OAAO,GAAG,IAAI;IAClB,OAAO,IAAIV,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAI;MACnCgB,UAAU,CAAC,MAAK;QACZ,IAAIC,YAAY,GAAGT,OAAO,CAACK,cAAc,CAAChB,GAAG,CAAC;QAC9CoB,YAAY,KAAK,IAAI,GAAGlB,OAAO,CAACmB,IAAI,CAACC,KAAK,CAACF,YAAY,CAAC,CAAC,GAAGjB,MAAM,CAAC,yBAAyB,CAAC;MACjG,CAAC,EAAE,IAAI,CAACoB,aAAa,CAAC;IAC1B,CAAC,CAAC;EACN;EAEQR,iBAAiB,CAACf,GAAY,EAAEwB,KAAW;IAC/C,IAAIb,OAAO,GAAG,IAAI;IAClB,OAAO,IAAIV,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAI;MACnCgB,UAAU,CAAC,MAAK;QACZF,YAAY,CAACQ,OAAO,CAACzB,GAAG,EAAEqB,IAAI,CAACK,SAAS,CAACF,KAAK,CAAC,CAAC;QAChDtB,OAAO,CAAC,OAAO,CAAC;MACpB,CAAC,EAAE,IAAI,CAACyB,YAAY,CAAC;IACzB,CAAC,CAAC;EACN;;AA/DS9B,mBAAmB;mBAAnBA,mBAAmB;AAAA;AAAnBA,mBAAmB;SAAnBA,mBAAmB;EAAA+B,SAAnB/B,mBAAmB;EAAAgC,YAFf;AAAM","names":["StoreServiceImplDev","constructor","load","key","Promise","resolve","reject","undefined","loadingSimulation","String","then","result","catch","loadWithKey","context","reason","save","content","saveingSimulation","handleJsonNull","localStorage","getItem","setTimeout","resultString","JSON","parse","LOADING_DELAY","value","setItem","stringify","SAVING_DELAY","factory","providedIn"],"sourceRoot":"","sources":["/home/kovo/Documents/PROJEKTY GitHub/MongoExpressResourceOpenerNG/mongo-express-resource-opener-ng/src/app/_base/services/store.service.impl.dev.ts"],"sourcesContent":["// angular imports\nimport { Injectable } from \"@angular/core\";\n\n// my imports\nimport { StoreService } from \"./store.service\";\n\n/** \n *  This implementation should run on localhost development session or in webpage mode\n*/\n\n@Injectable({\n    providedIn : 'root'\n})\nexport class StoreServiceImplDev implements StoreService {\n\n    public SAVING_DELAY = 5000;\n    public LOADING_DELAY = 1000;\n\n    public load(key : string | number) : Promise<any> {\n        return new Promise((resolve, reject) => {\n            if (key !== undefined && key !== null) {\n                this.loadingSimulation(String(key))\n                    .then((result : any) => { resolve(result); })\n                    .catch(() => reject(\"No data found in localStorage\"));\n            } else {\n                reject(\"No key for data defined\");\n            } \n        });\n    }\n\n    public loadWithKey(key : string) : Promise<any> {\n        var context = this;\n        return new Promise((resolve, reject) => {\n            this.load(key)\n                .then((result : any) => { \n\n                    resolve(result); \n                })\n                .catch((reason) => reject(reason));\n        });\n    }\n\n    public save(key: string | number, content : any) : Promise<any> {\n        return new Promise((resolve, reject) => {\n            if (content !== undefined) {\n                this.saveingSimulation(String(key), content)\n                    .then((result : any) => { resolve(result); })\n            } else {\n                reject(\"No data passed into local storage\")\n            }\n        });\n    }\n\n    private handleJsonNull(key : string) : string {\n        let result : string | null = localStorage.getItem(key);\n        return result === null ? \"{}\" : result;\n    }\n\n    private loadingSimulation(key : string) : Promise<any> {\n        var context = this;\n        return new Promise((resolve, reject) => { \n            setTimeout(() => {\n                let resultString = context.handleJsonNull(key);\n                resultString !== \"{}\" ? resolve(JSON.parse(resultString)) : reject(\"No data in localStorage\");\n            }, this.LOADING_DELAY);\n        });\n    }\n\n    private saveingSimulation(key : string, value : any) : Promise<any> {\n        var context = this;\n        return new Promise((resolve, reject) => { \n            setTimeout(() => {\n                localStorage.setItem(key, JSON.stringify(value));\n                resolve(\"dummy\");\n            }, this.SAVING_DELAY);\n        });\n    }\n\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}