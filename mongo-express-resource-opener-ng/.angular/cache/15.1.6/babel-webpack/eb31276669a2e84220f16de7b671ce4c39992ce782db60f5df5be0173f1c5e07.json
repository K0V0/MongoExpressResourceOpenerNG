{"ast":null,"code":"import { EnviromentUtil, SettingsNames } from 'src/app/_base/utils/enviroment.util';\nimport { KeyValuePair, Settings } from './query.service';\nimport * as i0 from \"@angular/core\";\nexport class QueryServiceImpl {\n  constructor() {\n    //FIXME dependency injection on various enviroments\n    this.storeService = EnviromentUtil.getStoreService();\n  }\n  open(resourceId) {\n    var context = this;\n    return new Promise((resolve, reject) => {\n      if (resourceId === undefined || resourceId === null || resourceId.trim().length < 1) {\n        reject(false);\n      } else {\n        context.check(resourceId);\n      }\n    });\n  }\n  /** HELPING METHODS ------------------------------------------------------------------------------------------- */\n  check(resourceId) {\n    var context = this;\n    return Promise.all([context.loadAllSettings()]).then(settings => {\n      context.fireRequests(resourceId, settings);\n    });\n  }\n  fireRequests(resourceId, settings) {\n    var context = this;\n    return new Promise((resolve, reject) => {\n      let requestsPromises = context.getDatasourcesUrls(settings, resourceId).map(url => fetch(url));\n      Promise.allSettled(requestsPromises).then(responses => {\n        console.log('RESPONSE');\n        console.log(responses);\n      });\n    });\n  }\n  getDatasourcesUrls(settings, resourceId) {\n    let searchEverywhere = this.extractSetting(settings, SettingsNames.CHECK_ON_ALL_ENVIROMENTS);\n    let currentEnviroment = this.extractSetting(settings, SettingsNames.CURRENT_ENVIROMENT);\n    return this.extractSetting(settings, SettingsNames.ENVIROMENTS).filter(enviroment => searchEverywhere ? true : enviroment.id === currentEnviroment).flatMap(enviroment => enviroment.datasets).map(datasourceUrl => datasourceUrl.lastIndexOf(\"/\") === datasourceUrl.length ? datasourceUrl : datasourceUrl + \"/\").map(datasourceUrl => datasourceUrl + \"\\\"\" + resourceId + \"\\\"\");\n  }\n  loadAllSettings() {\n    return new Promise((resolve, reject) => {\n      let settingsPromises = [];\n      Object.values(SettingsNames).forEach(settingName => {\n        settingsPromises.push(this.storeService.loadWithKey(settingName));\n      });\n      Promise.allSettled(settingsPromises).then(results => {\n        let settings = [];\n        results.forEach(result => {\n          if (result.status === 'fulfilled') {\n            settings.push(result.value);\n          }\n        });\n        resolve(settings);\n      }).catch(() => {\n        reject('Error during loading settings from store - promises settling');\n      });\n    });\n  }\n  extractSetting(settings, settingType) {\n    return settings.flatMap(setting => setting).filter(setting => Object.keys(setting)[0] === settingType).find(x => x)[settingType];\n  }\n}\nQueryServiceImpl.ɵfac = function QueryServiceImpl_Factory(t) {\n  return new (t || QueryServiceImpl)();\n};\nQueryServiceImpl.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: QueryServiceImpl,\n  factory: QueryServiceImpl.ɵfac,\n  providedIn: 'root'\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}