{"ast":null,"code":"import { SettingDecoratorConverterBase } from 'src/app/_base/decorators/setting/setting.decorator.converter';\nexport class DataSetsSettingDecoratorConverter extends SettingDecoratorConverterBase {\n  mapForNgModel(content) {\n    return content?.map(x => ({\n      id: x.id,\n      name: x.name,\n      datasets: x.datasets.join('\\n')\n    }));\n  }\n  mapForStore(content) {\n    return content?.map(x => ({\n      id: x.id,\n      name: x.name,\n      datasets: x.datasets.trim().split('\\n').map(x => x.trim())\n    }));\n  }\n}","map":{"version":3,"mappings":"AACA,SAASA,6BAA6B,QAAQ,8DAA8D;AAI5G,OAAM,MAAQC,iCACN,SAAQD,6BAAqE;EAEvEE,aAAa,CAACC,OAA0B;IAC9C,OAAOA,OAAO,EAAEC,GAAG,CAAEC,CAAC,KAAM;MACxBC,EAAE,EAAED,CAAC,CAACC,EAAE;MACRC,IAAI,EAAEF,CAAC,CAACE,IAAI;MACZC,QAAQ,EAAEH,CAAC,CAACG,QAAQ,CAACC,IAAI,CAAC,IAAI;KACjC,CAAC,CAAC;EACP;EAEUC,WAAW,CAACP,OAA4B;IAC9C,OAAOA,OAAO,EAAEC,GAAG,CAAEC,CAAC,KAAM;MACxBC,EAAE,EAAED,CAAC,CAACC,EAAE;MACRC,IAAI,EAAEF,CAAC,CAACE,IAAI;MACZC,QAAQ,EAAEH,CAAC,CAACG,QAAQ,CAACG,IAAI,EAAE,CAACC,KAAK,CAAC,IAAI,CAAC,CAACR,GAAG,CAAEC,CAAC,IAAKA,CAAC,CAACM,IAAI,EAAE;KAC9D,CAAC,CAAC;EACP","names":["SettingDecoratorConverterBase","DataSetsSettingDecoratorConverter","mapForNgModel","content","map","x","id","name","datasets","join","mapForStore","trim","split"],"sourceRoot":"","sources":["/home/matej/Dokumenty/PROJEKTY GitHub/MongoExpressResourceOpenerNG/mongo-express-resource-opener-ng/src/app/options/components/data-sets/data-sets.setting.decorator.converter.ts"],"sourcesContent":["import { DataSetsNgModelType } from 'src/app/_base/components/_base/data-sets/data-sets.interfaces';\nimport { SettingDecoratorConverterBase } from 'src/app/_base/decorators/setting/setting.decorator.converter';\nimport { DataSetsStoreType } from './../../../_base/components/_base/data-sets/data-sets.interfaces';\n\n\nexport  class DataSetsSettingDecoratorConverter \n        extends SettingDecoratorConverterBase<DataSetsNgModelType, DataSetsStoreType>\n{\n    protected mapForNgModel(content: DataSetsStoreType) : DataSetsNgModelType {\n        return content?.map((x) => ({\n            id: x.id,\n            name: x.name,\n            datasets: x.datasets.join('\\n')\n        }));\n    }\n\n    protected mapForStore(content: DataSetsNgModelType) : DataSetsStoreType {\n        return content?.map((x) => ({\n            id: x.id,\n            name: x.name,\n            datasets: x.datasets.trim().split('\\n').map((x) => x.trim())\n        }));\n    }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}