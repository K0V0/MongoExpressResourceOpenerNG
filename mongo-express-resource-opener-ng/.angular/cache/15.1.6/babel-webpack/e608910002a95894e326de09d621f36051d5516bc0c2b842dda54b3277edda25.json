{"ast":null,"code":"// Angular imports\nimport 'reflect-metadata';\nimport { StoreServiceImplDev } from '../../services/store.service.impl.dev';\nimport { StoreServiceImplProd } from '../../services/store.service.impl.prod';\nimport { EnviromentUtil, RuntimeEnviroment } from '../../utils/enviroment.util';\n/**\n *  Loads value from Chrome settings storage, or sets default value if provided\n *  or common backup scenario  for given type.\n *  Sends value into Chrome settings storage if value is changed.\n*/\nexport const Setting = params => (target, propertyKey) => {\n  // should run only 1st time during class init, after that \n  // all annotated values should not be undefined\n  // console.log('define property do pice kurva');\n  // console.log(target);\n  // console.log(Object.keys(target));\n  // console.log(propertyKey);\n  // console.log(Object(target));\n  // console.log(Object(target)[propertyKey]);\n  //console.log(window);\n  // console.log(\"-------------------\");\n  SettingDecorator.getInstance().loadValue(target, propertyKey, params === undefined ? {} : params);\n};\nclass SettingDecorator {\n  constructor(storeService) {\n    SettingDecorator.storeService = storeService;\n  }\n  static getInstance() {\n    // must be solved that shitty way, because standart dependency injection comes too late\n    if (this.instance === undefined) {\n      this.instance = new SettingDecorator(EnviromentUtil.runningAt() === RuntimeEnviroment.WEB ? new StoreServiceImplDev() : new StoreServiceImplProd());\n    }\n    return this.instance;\n  }\n  loadValue(target, propertyKey, params) {\n    // console.log('define property do pice kurva');\n    // console.log(target);\n    // console.log(Object.keys(target));\n    // console.log(propertyKey);\n    // console.log(Object(target));\n    // console.log(Object(target)[propertyKey]);\n    // SettingDecorator.defineProperty(target, propertyKey);    \n    let settingKey = params['storeKey'] === undefined ? target.constructor.name + \"-\" + propertyKey : params['storeKey'];\n    SettingDecorator.storeService.load(settingKey).then(resolve => {\n      // undefined should be edge case\n      console.log(\"setting resolved: \");\n      console.log(resolve);\n      //return resolve[settingKey];\n      return resolve;\n    }).catch(error => {\n      // communication error or not found in store should be that case\n      console.log(\"setting resolve error: \");\n      console.log(error);\n      return undefined;\n    }).then(result => {\n      console.log(\"setting resolve final stage: \");\n      console.log(result);\n      let fieldValue;\n      // value was found in settings store\n      if (result !== undefined) {\n        // console.log(propertyKey);\n        // console.log(params);\n        // if (SettingDecorator.hasParam(params, 'converter') \n        //         && params['converter']['storeConversion'] !== undefined\n        //         && params['converter']['storeConversion'](result) !== undefined) {\n        //     console.log(\"final strage conversion\");\n        //     fieldValue = params['converter']['storeConversion'](result);\n        // } else {\n        //     fieldValue = result;\n        // }\n      }\n      // value was not found in settings store but default one exists\n      else if (SettingDecorator.hasParam(params, 'defaultValue')) {\n        console.log(\"Setting resolve final stage: using default vals\");\n        fieldValue = params['defaultValue'];\n      }\n      // no value and no default one, try to set one for most common types\n      else {\n        console.log(\"Setting resolve final stage: try setting common default\");\n        fieldValue = SettingDecorator.getCommonDefaultValue(target, propertyKey);\n      }\n      // \"decorate\" fields, replace field value by value from settings store \n      // or send updated value to settings store\n      let currentValue = Object(target)[propertyKey];\n      let uploadAllowed = !(SettingDecorator.hasParam(params, 'onlyDownload') && params['onlyDownload'] === true);\n      console.log(\"uploadAllowed\");\n      console.log(uploadAllowed);\n      console.log(target);\n      console.log(propertyKey);\n      Object.defineProperty(target, propertyKey, {\n        get: function () {\n          console.log('define property: get');\n          return currentValue === undefined ? fieldValue : currentValue;\n        },\n        set: function (value) {\n          console.log('define property: set');\n          if (currentValue != value) {\n            currentValue = value;\n            if (uploadAllowed) {\n              let valueToUpload;\n              //TODO refucktor\n              if (SettingDecorator.hasParam(params, 'converter') && params['converter']['modelConversion'] !== undefined && params['converter']['modelConversion'](value) !== undefined) {\n                valueToUpload = params['converter']['modelConversion'](value);\n              } else {\n                valueToUpload = value;\n              }\n              // console.log(\"value to upload\");\n              // console.log(valueToUpload);\n              SettingDecorator.storeService.save(settingKey, valueToUpload);\n            }\n          }\n        },\n        configurable: true\n      });\n      // console.log(\"value finally used: \");\n      // console.log(propertyKey);\n      // console.log(params);\n      // console.log(Object(target)[propertyKey]); // mylo by sspustit tento mock\n    }).catch(error => {\n      console.log(error);\n    });\n  }\n  static getCommonDefaultValue(target, propertyKey) {\n    let fieldType = Reflect.getMetadata(\"design:type\", target, propertyKey).name;\n    switch (fieldType) {\n      case 'Boolean':\n        return false;\n      default:\n        return null;\n    }\n  }\n  static hasParam(params, paramName) {\n    return params !== undefined && Object(params)[paramName] !== undefined;\n  }\n  static defineProperty(target, propertyKey) {\n    console.log('define property do pice kurva');\n    console.log(target);\n    console.log(propertyKey);\n    console.log(Object(target));\n    console.log(Object(target)[propertyKey]);\n    let currentValue = Object(target)[propertyKey];\n    // let uploadAllowed : boolean = !(SettingDecorator.hasParam(params, 'onlyDownload') && params['onlyDownload'] === true);\n    console.log(currentValue);\n    Object.defineProperty(target, propertyKey, {\n      get: function () {\n        console.log('define property: get');\n        // return currentValue === undefined ? fieldValue : currentValue;\n        return currentValue === undefined ? null : currentValue;\n      },\n      set: function (value) {\n        console.log('define property: set');\n        if (currentValue != value) {\n          currentValue = value;\n          // if (uploadAllowed) {\n          //     let valueToUpload : any;\n          //     //TODO refucktor\n          //     // if (SettingDecorator.hasParam(params, 'converter') \n          //     //         && params['converter']['modelConversion'] !== undefined\n          //     //         && params['converter']['modelConversion'](value) !== undefined) {\n          //     //     valueToUpload = params['converter']['modelConversion'](value);\n          //     // } else {\n          //     //     valueToUpload = value;\n          //     // }\n          //     // console.log(\"value to upload\");\n          //     // console.log(valueToUpload);\n          //    // SettingDecorator.storeService.save(settingKey, valueToUpload);\n          // }\n        }\n      },\n\n      configurable: true\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["StoreServiceImplDev","StoreServiceImplProd","EnviromentUtil","RuntimeEnviroment","Setting","params","target","propertyKey","SettingDecorator","getInstance","loadValue","undefined","constructor","storeService","instance","runningAt","WEB","settingKey","name","load","then","resolve","console","log","catch","error","result","fieldValue","hasParam","getCommonDefaultValue","currentValue","Object","uploadAllowed","defineProperty","get","set","value","valueToUpload","save","configurable","fieldType","Reflect","getMetadata","paramName"],"sourceRoot":"","sources":["/home/matej/Dokumenty/PROJEKTY GitHub/MongoExpressResourceOpenerNG/mongo-express-resource-opener-ng/src/app/_base/decorators/setting/setting.decorator.ts"],"sourcesContent":["import { BaseComponent } from 'src/app/_base/components/_base/base.component';\n// Angular imports\nimport 'reflect-metadata';\n\n// My imports\nimport { StoreService } from '../../services/store.service';\nimport { StoreServiceImplDev } from '../../services/store.service.impl.dev';\nimport { StoreServiceImplProd } from '../../services/store.service.impl.prod';\nimport { EnviromentUtil, RuntimeEnviroment } from '../../utils/enviroment.util';\nimport { SettingDecoratorParameters } from './setting.decorator.parameters';\n\n\n/**\n *  Loads value from Chrome settings storage, or sets default value if provided \n *  or common backup scenario  for given type.\n *  Sends value into Chrome settings storage if value is changed.\n*/\nexport const Setting = (params ?: SettingDecoratorParameters) => (target: BaseComponent, propertyKey: string) => {\n    // should run only 1st time during class init, after that \n    // all annotated values should not be undefined\n\n    // console.log('define property do pice kurva');\n    // console.log(target);\n    // console.log(Object.keys(target));\n    // console.log(propertyKey);\n    // console.log(Object(target));\n    // console.log(Object(target)[propertyKey]);\n    //console.log(window);\n\n    // console.log(\"-------------------\");\n    \n\n    SettingDecorator.getInstance().loadValue(target, propertyKey, (params === undefined) ? {} : params);\n}\n\n\nclass SettingDecorator {\n\n    private static instance : SettingDecorator;\n\n    private static storeService : StoreService;\n\n    private constructor(storeService : StoreService) {\n        SettingDecorator.storeService = storeService;\n    }\n\n    public static getInstance() : SettingDecorator {\n        // must be solved that shitty way, because standart dependency injection comes too late\n        if (this.instance === undefined) {\n            this.instance = new SettingDecorator(\n                EnviromentUtil.runningAt() === RuntimeEnviroment.WEB ? new StoreServiceImplDev() : new StoreServiceImplProd()\n            )\n        }\n        return this.instance;\n    }\n\n    public loadValue(target : Object, propertyKey : string, params : SettingDecoratorParameters) : void {\n\n\n        // console.log('define property do pice kurva');\n        // console.log(target);\n        // console.log(Object.keys(target));\n        // console.log(propertyKey);\n        // console.log(Object(target));\n        // console.log(Object(target)[propertyKey]);\n\n        // SettingDecorator.defineProperty(target, propertyKey);    \n\n        let settingKey : string = params['storeKey'] === undefined\n            ? target.constructor.name + \"-\" + propertyKey \n            : params['storeKey']\n\n        SettingDecorator.storeService\n            .load(settingKey)\n            .then((resolve : any) => {\n                // undefined should be edge case\n                console.log(\"setting resolved: \");\n                console.log(resolve);\n                //return resolve[settingKey];\n                return resolve;\n            })\n            .catch((error : any) => {\n                // communication error or not found in store should be that case\n                console.log(\"setting resolve error: \");\n                console.log(error);\n                return undefined;\n            })\n            .then((result : any) => {\n\n                console.log(\"setting resolve final stage: \");\n                console.log(result);\n\n                let fieldValue : any;\n                // value was found in settings store\n                if (result !== undefined) {\n                    // console.log(propertyKey);\n                    // console.log(params);\n                    // if (SettingDecorator.hasParam(params, 'converter') \n                    //         && params['converter']['storeConversion'] !== undefined\n                    //         && params['converter']['storeConversion'](result) !== undefined) {\n                    //     console.log(\"final strage conversion\");\n                    //     fieldValue = params['converter']['storeConversion'](result);\n                    // } else {\n                    //     fieldValue = result;\n                    // }\n                }\n                // value was not found in settings store but default one exists\n                else if (SettingDecorator.hasParam(params, 'defaultValue')) {\n                    console.log(\"Setting resolve final stage: using default vals\");\n                    fieldValue = params['defaultValue'];\n                }\n                // no value and no default one, try to set one for most common types\n                else {\n                    console.log(\"Setting resolve final stage: try setting common default\");\n                    fieldValue = SettingDecorator.getCommonDefaultValue(target, propertyKey);\n                }\n\n                // \"decorate\" fields, replace field value by value from settings store \n                // or send updated value to settings store\n                let currentValue : any = Object(target)[propertyKey];\n                let uploadAllowed : boolean = !(SettingDecorator.hasParam(params, 'onlyDownload') && params['onlyDownload'] === true);\n\n                console.log(\"uploadAllowed\");\n                console.log(uploadAllowed);\n\n                console.log(target);\n                console.log(propertyKey);\n                \n                Object.defineProperty(target, propertyKey, {\n                    get: function() {\n                        console.log('define property: get');\n                        return currentValue === undefined ? fieldValue : currentValue;\n                    },\n                    set: function(value) {\n                        console.log('define property: set');\n                        if (currentValue != value) {\n                            currentValue = value;\n                            if (uploadAllowed) {\n                                let valueToUpload : any;\n                                //TODO refucktor\n                                if (SettingDecorator.hasParam(params, 'converter') \n                                        && params['converter']['modelConversion'] !== undefined\n                                        && params['converter']['modelConversion'](value) !== undefined) {\n                                    valueToUpload = params['converter']['modelConversion'](value);\n                                } else {\n                                    valueToUpload = value;\n                                }\n                                // console.log(\"value to upload\");\n                                // console.log(valueToUpload);\n                                SettingDecorator.storeService.save(settingKey, valueToUpload);\n                            }\n                        }\n                    },\n                    configurable: true\n                })\n\n                // console.log(\"value finally used: \");\n                // console.log(propertyKey);\n                // console.log(params);\n                // console.log(Object(target)[propertyKey]); // mylo by sspustit tento mock\n\n            })\n            .catch((error : any) => {\n                console.log(error);\n            }); \n\n    }\n\n    private static getCommonDefaultValue(target : Object, propertyKey : string) : any {\n        let fieldType : string = Reflect.getMetadata(\"design:type\", target, propertyKey).name;\n        switch(fieldType) {\n            case 'Boolean':\n                return false;\n            default:\n                return null; \n        }\n    }\n\n    private static hasParam(params: SettingDecoratorParameters, paramName : string) : boolean {\n        return params !== undefined && Object(params)[paramName] !== undefined;\n    }\n\n    private static defineProperty(target : any, propertyKey : string) : void {\n        console.log('define property do pice kurva');\n        console.log(target);\n        console.log(propertyKey);\n        console.log(Object(target));\n        console.log( Object(target)[propertyKey]);\n    \n        let currentValue : any = Object(target)[propertyKey];\n        // let uploadAllowed : boolean = !(SettingDecorator.hasParam(params, 'onlyDownload') && params['onlyDownload'] === true);\n\n        console.log(currentValue);\n\n        Object.defineProperty(target, propertyKey, {\n                    get: function() {\n                        console.log('define property: get');\n                        // return currentValue === undefined ? fieldValue : currentValue;\n                        return currentValue === undefined ? null : currentValue;\n                    },\n                    set: function(value) {\n                        console.log('define property: set');\n                        if (currentValue != value) {\n                            currentValue = value;\n                            // if (uploadAllowed) {\n                            //     let valueToUpload : any;\n                            //     //TODO refucktor\n                            //     // if (SettingDecorator.hasParam(params, 'converter') \n                            //     //         && params['converter']['modelConversion'] !== undefined\n                            //     //         && params['converter']['modelConversion'](value) !== undefined) {\n                            //     //     valueToUpload = params['converter']['modelConversion'](value);\n                            //     // } else {\n                            //     //     valueToUpload = value;\n                            //     // }\n                            //     // console.log(\"value to upload\");\n                            //     // console.log(valueToUpload);\n                            //    // SettingDecorator.storeService.save(settingKey, valueToUpload);\n                            // }\n                        }\n                    },\n                    configurable: true\n                })\n    }\n    \n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}